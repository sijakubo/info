<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Schema - Tag - Simon Jakubowski</title>
        <link>http://sijakubo.de/tags/schema/</link>
        <description>Schema - Tag - Simon Jakubowski</description>
        <generator>Hugo -- gohugo.io</generator><language>de</language><managingEditor>sijakubo@gmail.com ( Simon Jakubowski)</managingEditor>
            <webMaster>sijakubo@gmail.com ( Simon Jakubowski)</webMaster><lastBuildDate>Thu, 30 Mar 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://sijakubo.de/tags/schema/" rel="self" type="application/rss+xml" /><item>
    <title>PostgreSQL Composite Types to reduce boilerplate code from you database schema</title>
    <link>http://sijakubo.de/posts/post-7/</link>
    <pubDate>Thu, 30 Mar 2023 00:00:00 &#43;0000</pubDate>
    <author> Simon Jakubowski</author>
    <guid>http://sijakubo.de/posts/post-7/</guid>
    <description><![CDATA[<p>PostgreSQL is a powerful and flexible open-source relational database management system. One of its most useful features is the ability to define <a href="https://www.postgresql.org/docs/current/rowtypes.html" target="_blank" rel="noopener noreffer ">custom composite types</a> (Since Postgres 11), which are user-defined data types that combine multiple fields of different types into a single logical entity. In this article, we&rsquo;ll explore the benefits of using composite types in PostgreSQL and how to use them in your database schema.</p>
<h3 id="create-composite-type">Create Composite Type</h3>
<p>To define a composite type in PostgreSQL, you use the CREATE TYPE statement, followed by the name of the type and a list of its component fields and types. For example, here&rsquo;s how you might define a audit type:</p>]]></description>
</item>
<item>
    <title>Zero downtime deployment with breaking DB-Schema change - by example</title>
    <link>http://sijakubo.de/posts/post-6/</link>
    <pubDate>Thu, 12 Jan 2023 00:00:00 &#43;0000</pubDate>
    <author> Simon Jakubowski</author>
    <guid>http://sijakubo.de/posts/post-6/</guid>
    <description><![CDATA[<p>When running multiple Server nodes, sharing the same Database, it becomes more and more important to handle backwards compatibility on the database especially during Deployments.</p>
<p>When we start da Deployment, a new Server node is being deployed to a cluster. This node will then migrate the Database to it&rsquo;s designated schema version. If this new version is not backwards compatible, the currently running Server instances will run into several problems, reading or writing to the database.</p>]]></description>
</item>
</channel>
</rss>
